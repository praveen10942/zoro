"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


#

'use client';

import {useState, useEffect} from 'react';
import {useRouter} from 'next/navigation';
import {Card, CardContent, CardDescription, CardHeader, CardTitle} from "@/components/ui/card";
import {Input} from "@/components/ui/input";
import {Button} from "@/components/ui/button";
import {toast} from "@/hooks/use-toast";
import {cn} from "@/lib/utils";

const LoginPage = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [isSignup, setIsSignup] = useState(false); // State to toggle between login and signup

  useEffect(() => {
    // Prevent logged-in users from accessing the login page
    const isLoggedIn = sessionStorage.getItem('isAuthenticated');
    if (isLoggedIn === 'true') {
      router.push('/');
    }
  }, [router]);

  const handleLogin = async () => {
    setIsLoading(true);
    try {
      // Basic authentication logic (replace with your actual authentication)
      const storedPassword = sessionStorage.getItem(username);
      if (storedPassword && password === storedPassword) {
        sessionStorage.setItem('isAuthenticated', 'true');
        toast({
          title: "Login Successful",
          description: `Welcome, ${username}!`,
        });
        router.push('/');
      } else {
        toast({
          title: "Login Failed",
          description: "Invalid username or password.",
          variant: "destructive",
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleGuestLogin = () => {
    sessionStorage.setItem('isAuthenticated', 'true');
    toast({
      title: "Guest Login",
      description: "Logged in as guest.",
    });
    router.push('/');
  };

  const handleSignup = async () => {
    setIsLoading(true);
    try {
      if (password !== confirmPassword) {
        toast({
          title: "Signup Failed",
          description: "Passwords do not match.",
          variant: "destructive",
        });
        return;
      }

      // Store the username and password in sessionStorage
      sessionStorage.setItem(username, password);
      toast({
        title: "Signup Successful",
        description: `Account created for ${username}. Please login.`,
      });
      setIsSignup(false); // Switch back to login mode
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-100 to-white">
      <div className="relative w-full max-w-md mx-auto py-16 px-6 md:px-12">
        <div className="bg-white rounded-lg shadow-xl overflow-hidden">
          <div className="p-8 grid gap-4">
            <CardHeader className="p-0">
              <CardTitle className="text-2xl font-bold text-gray-800 text-center">
                {isSignup ? "Create Account" : "Login"}
              </CardTitle>
              <CardDescription className="text-sm text-gray-600 text-center">
                {isSignup
                  ? "Enter your details to create an account."
                  : "Enter your credentials to access the FairHire Analyzer."}
              </CardDescription>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="grid gap-2">
                <label htmlFor="username" className="text-gray-700">Username</label>
                <Input
                  id="username"
                  type="text"
                  placeholder="Enter your username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  disabled={isLoading}
                  className="rounded-md border-gray-300 focus:ring-blue-500"
                />
              </div>
              <div className="grid gap-2">
                <label htmlFor="password" className="text-gray-700">Password</label>
                <Input
                  id="password"
                  type="password"
                  placeholder="Enter your password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  disabled={isLoading}
                  className="rounded-md border-gray-300 focus:ring-blue-500"
                />
              </div>
              {isSignup && (
                <div className="grid gap-2">
                  <label htmlFor="confirmPassword" className="text-gray-700">Confirm Password</label>
                  <Input
                    id="confirmPassword"
                    type="password"
                    placeholder="Confirm your password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    disabled={isLoading}
                    className="rounded-md border-gray-300 focus:ring-blue-500"
                  />
                </div>
              )}
              {isSignup ? (
                <Button
                  onClick={handleSignup}
                  disabled={isLoading}
                  className="bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                >
                  {isLoading ? "Creating Account..." : "Create Account"}
                </Button>
              ) : (
                <Button
                  onClick={handleLogin}
                  disabled={isLoading}
                  className="bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                >
                  {isLoading ? "Logging in..." : "Login"}
                </Button>
              )}
              {!isSignup && (
                <Button
                  variant="secondary"
                  onClick={handleGuestLogin}
                  disabled={isLoading}
                  className="rounded-md border-gray-300 text-gray-700 hover:bg-gray-100 transition-colors"
                >
                  Continue as Guest
                </Button>
              )}
              <div className="text-sm text-gray-600 text-center">
                {isSignup ? (
                  <>
                    Already have an account?{" "}
                    <Button variant="link" onClick={() => setIsSignup(false)} className="text-blue-500">
                      Login
                    </Button>
                  </>
                ) : (
                  <>
                    Don't have an account?{" "}
                    <Button variant="link" onClick={() => setIsSignup(true)} className="text-blue-500">
                      Sign up
                    </Button>
                  </>
                )}
              </div>
            </CardContent>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;

